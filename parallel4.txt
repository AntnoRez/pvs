#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <omp.h>
#include <float.h>

void populate_matrix(double** matrix, int size) {
    #pragma omp parallel for collapse(2)
    for (int row_idx = 0; row_idx < size; row_idx++) {
        for (int col_idx = 0; col_idx < size; col_idx++) {
            matrix[row_idx][col_idx] = (double)rand() / (double)RAND_MAX * 100.0;
        }
    }
}

void perform_matrix_calculations(
    double** matrix1, 
    double** matrix2,
    double** sum_result,
    double** difference_result,
    double** product_result,
    double** quotient_result,
    int size
) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            sum_result[i][j] = matrix1[i][j] + matrix2[i][j];
            difference_result[i][j] = matrix1[i][j] - matrix2[i][j];
            product_result[i][j] = matrix1[i][j] * matrix2[i][j];
            quotient_result[i][j] = matrix1[i][j] / matrix2[i][j];
        }
    }
}

double** allocate_matrix(int size) {
    double** matrix = (double**)malloc(size * sizeof(double*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (double*)malloc(size * sizeof(double));
    }
    return matrix;
}

void deallocate_matrix(double** matrix, int size) {
    for (int i = 0; i < size; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Usage: %s <thread_count>\n", argv[0]);
        return 1;
    }

    int thread_count = atoi(argv[1]);
    omp_set_num_threads(thread_count);

    int matrix_size;
    printf("Enter matrix size: ");
    scanf("%d", &matrix_size);

    srand((unsigned int)time(NULL));

    double** mat1 = allocate_matrix(matrix_size);
    double** mat2 = allocate_matrix(matrix_size);
    double** sum_mat = allocate_matrix(matrix_size);
    double** diff_mat = allocate_matrix(matrix_size);
    double** prod_mat = allocate_matrix(matrix_size);
    double** quot_mat = allocate_matrix(matrix_size);

    double total_time = 0.0;
    double min_time = DBL_MAX;
    double max_time = 0.0;

    for (int iter = 0; iter < 100; iter++) {
        populate_matrix(mat1, matrix_size);
        populate_matrix(mat2, matrix_size);

        double start = omp_get_wtime();
        perform_matrix_calculations(mat1, mat2, sum_mat, diff_mat, prod_mat, quot_mat, matrix_size);
        double end = omp_get_wtime();

        double elapsed = end - start;
        total_time += elapsed;
        if (elapsed < min_time) min_time = elapsed;
        if (elapsed > max_time) max_time = elapsed;
    }

    printf("\nAfter 100 iterations with %dx%d matrices (%d threads):\n", 
           matrix_size, matrix_size, thread_count);
    printf("Average time: %.4f s\n", total_time / 100);
    printf("Minimum time: %.4f s\n", min_time);
    printf("Maximum time: %.4f s\n", max_time);

    deallocate_matrix(mat1, matrix_size);
    deallocate_matrix(mat2, matrix_size);
    deallocate_matrix(sum_mat, matrix_size);
    deallocate_matrix(diff_mat, matrix_size);
    deallocate_matrix(prod_mat, matrix_size);
    deallocate_matrix(quot_mat, matrix_size);

    return 0;
}
